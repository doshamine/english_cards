import configparser
from models import Word, Person, PersonWord
from sqlalchemy.orm import sessionmaker
import sqlalchemy as sq
import telebot
from telebot import types
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
import random

config = configparser.ConfigParser()
config.read('settings.ini')

db = config['DB']['db']
login = config['DB']['login']
password = config['DB']['password']
name = config['DB']['name']
token = config['TELEBOT']['token']

PROMPTS_NUM = 4
START_WORDS_NUM = 8
DSN = f"{db}://{login}:{password}@localhost:5432/{name}"

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(token, state_storage=state_storage)
buttons = []

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'
    NEXT = '–î–∞–ª—å—à–µ'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()

engine = sq.create_engine(DSN)
Session = sessionmaker(bind=engine)
session = Session()


def person_exists(cid: int) -> bool:
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º message.chat.id.

    	–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    	cid - —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π message.chat.id.

    	–í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
    	True - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º message.chat.id, –∏–Ω–∞—á–µ False.

    """
    q = session.query(Person.chat_id).select_from(Person).filter(Person.chat_id == cid).all()
    return not len(list(q)) == 0


def add_person(cid: int):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Person –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        cid - —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π message.chat.id.
    """
    person = Person(chat_id=cid)
    session.add(person)
    session.commit()
    person_words = [PersonWord(id_person=person.id, id_word=id_word) for id_word in range(1, START_WORDS_NUM + 1)]
    session.add_all(person_words)
    session.commit()


def get_words(cid: int) -> list:
    """ –ù–∞—Ö–æ–¥–∏—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º message.chat.id.

        –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        cid - —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π message.chat.id.

        –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º message.chat.id.
    """

    q = (
         session.query(Word.english).select_from(Word).
         join(PersonWord).join(Person).
         filter(Person.chat_id == cid).all()
    )

    return [line[0] for line in q]


def get_translate(word: str) -> str:
    """ –ù–∞—Ö–æ–¥–∏—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

        –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        word - —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

        –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
        –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –≤–∑—è—Ç—ã–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    q = session.query(Word.russian).select_from(Word).filter(Word.english == word)
    return q[0][0]


def show_target(data) -> str:
    return f"{data['target_word']} -> {data['translate_word']}"


def show_hint(*lines) -> str:
    return '\n'.join(lines)


def add_buttons(markup):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É.

        –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        markup - —Ä–∞–∑–º–µ—Ç–∫–∞, –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ telebot.types.ReplyKeyboardMarkup.
    """
    global buttons
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    next_btn = types.KeyboardButton(Command.NEXT)
    buttons.extend([add_word_btn, delete_word_btn, next_btn])
    markup.add(*buttons)


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /cards –∏ /start.
        –í —Å–ª—É—á–∞–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –°–ª–æ–≤–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message - –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ telebot.types.Message, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    cid = message.chat.id
    if not person_exists(cid):
        add_person(cid)
        bot.send_message(
            cid, "–ü—Ä–∏–≤–µ—Ç üëã\n–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
                     "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n\n"
                     "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
                     "–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n\n"
                     "–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"
        )

    words = get_words(cid)
    random.shuffle(words)
    words = words[:PROMPTS_NUM]
    target_word = random.choice(words)

    markup = types.ReplyKeyboardMarkup(row_width=2)
    global buttons
    buttons = [types.KeyboardButton(word) for word in words]
    words.remove(target_word)
    translate = get_translate(target_word)
    add_buttons(markup)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(cid, greeting, reply_markup=markup)

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    print('–î–∞–ª—å—à–µ...')
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    """ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message - –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ telebot.types.Message, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        word_q = session.query(Word.id).select_from(Word).filter(Word.english == data['target_word'])
        person_q = session.query(Person.id).select_from(Person).filter(Person.chat_id == message.chat.id)
        session.query(PersonWord).filter(PersonWord.id_word == word_q[0][0] and PersonWord.id_person == person_q[0][0]).delete()
        session.commit()
        reply = f'–£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ "{data['translate']}"'
        bot.send_message(message.chat.id, reply)
    create_cards(message)


def fix_word(message):
    """ –ó–∞–ø–∏—Å—å –ø–∞—Ä—ã —Å–ª–æ–≤, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message - –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ telebot.types.Message, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –ø–∞—Ä–µ —Å–ª–æ–≤ –∏ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    cid = message.chat.id
    english, russian = [word.strip() for word in message.text.split('-')]
    word = Word(english=english, russian=russian)
    session.add(word)
    session.commit()

    q = session.query(Person.id).select_from(Person).filter(Person.chat_id == cid)
    person_word = PersonWord(id_person=q[0][0], id_word=word.id)
    session.add(person_word)
    session.commit()

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = english
        data['translate_word'] = russian

    markup = types.ReplyKeyboardMarkup(row_width=2)
    global buttons
    buttons = []
    add_buttons(markup)
    bot.send_message(message.chat.id, show_hint(
                        f"{english} -> {russian}",
                              f"–í –í–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ {words_num(cid)} —Å–ª–æ–≤"
                           ),
                     reply_markup=markup
    )


def words_num(cid: int) -> int:
    num = session.query(PersonWord.id_word).join(Person).filter(Person.chat_id == cid).count()
    return num


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    msg = bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É '–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ' - '—Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ'")
    bot.register_next_step_handler(msg, fix_word)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–≤–µ—Ç–∞ –æ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ª–æ–≤–∞.

        –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message - –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ telebot.types.Message, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)

            global buttons
            buttons = []
            add_buttons(markup)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint(
                    "–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                    f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}"
            )


        bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.infinity_polling(skip_pending=True)